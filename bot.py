import os
import tempfile
import argparse
from typing import Dict, List
from mimetypes import guess_extension

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
import requests
from aiohttp import web
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
STABILITY_API_KEY = os.getenv("STABILITY_API_KEY")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
BASE_URL = os.getenv("BASE_URL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_context: Dict[int, List[dict]] = {}
user_edit_state: Dict[int, dict] = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_kb() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
        KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    )
    builder.row(KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"))
    return builder.as_markup(resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start", "help"))
async def cmd_start(message: Message):
    await message.answer(
        "‚ú® <b>AI –ë–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:</b>\n"
        "- –£–º–Ω—ã–π —á–∞—Ç, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        reply_markup=get_main_kb()
    )

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ---
async def on_startup(bot: Bot):
    await bot.set_webhook(
        url=f"{BASE_URL}/webhook",
        drop_pending_updates=True
    )
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {BASE_URL}/webhook")

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@dp.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
async def reset_context(message: Message):
    user_context.pop(message.from_user.id, None)
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω!", reply_markup=get_main_kb())

@dp.message(F.text == "üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def ask_gen_prompt(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def ask_edit_photo(message: Message):
    user_edit_state[message.from_user.id] = {}
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
@dp.message(F.text & F.reply_to_message.func(lambda msg: msg.text == "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"))
async def generate_image(message: Message):
    prompt = message.text.strip()
    
    try:
        await message.answer_chat_action("upload_photo")
        
        resp = requests.post(
            "https://api.stability.ai/v2beta/stable-image/generate/sd3",
            headers={"Authorization": f"Bearer {STABILITY_API_KEY}"},
            files={"none": ""},
            data={"prompt": prompt, "output_format": "png"},
            timeout=60
        )
        
        if resp.status_code == 200:
            await message.answer_photo(resp.content, caption=f"üé® {prompt}")
        else:
            error = resp.json().get("message", "Unknown error")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error}")
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
@dp.message(F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def handle_image_upload(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_edit_state:
        return
    
    try:
        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
        if message.document:
            if not message.document.mime_type.startswith("image/"):
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ JPEG/PNG!")
                return
            
            file = await bot.get_file(message.document.file_id)
            ext = guess_extension(message.document.mime_type) or ".jpg"
        else:  # –î–ª—è —Ñ–æ—Ç–æ
            file = await bot.get_file(message.photo[-1].file_id)
            ext = ".jpg"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        downloaded = await bot.download_file(file.file_path)
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
            tmp.write(downloaded.read())
            user_edit_state[user_id]["image_path"] = tmp.name
        
        await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤—å –º—è—á –≤ —É–≥–ª—É', '–£–±–µ—Ä–∏ —Ñ–æ–Ω' –∏–ª–∏ '–°–¥–µ–ª–∞–π —Å—Ç–∏–ª—å –∫–∏–±–µ—Ä–ø–∞–Ω–∫'):")
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        user_edit_state.pop(user_id, None)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
@dp.message(F.text & F.from_user.id.in_(user_edit_state.keys()))
async def process_image_edit(message: Message):
    user_id = message.from_user.id
    edit_prompt = message.text
    image_path = user_edit_state[user_id].get("image_path")
    
    if not image_path or not os.path.exists(image_path):
        await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        user_edit_state.pop(user_id, None)
        return
    
    try:
        await message.answer_chat_action("upload_photo")
        
        with open(image_path, "rb") as img_file:
            response = requests.post(
                "https://api.stability.ai/v2beta/stable-image/edit/inpaint",
                headers={"Authorization": f"Bearer {STABILITY_API_KEY}"},
                files={"image": img_file},
                data={
                    "prompt": edit_prompt,
                    "output_format": "png",
                },
                timeout=90
            )
        
        if response.status_code == 200:
            await message.answer_photo(
                response.content,
                caption=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {edit_prompt}"
            )
        else:
            error = response.json().get("message", "Unknown error")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {error}")
            
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {str(e)}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if image_path and os.path.exists(image_path):
            os.unlink(image_path)
        user_edit_state.pop(user_id, None)

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç ---
@dp.message(F.text & ~F.text.in_([
    "üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
]))
async def handle_ai_chat(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_context:
        user_context[user_id] = []
    
    user_context[user_id].append({"role": "user", "content": message.text})
    
    try:
        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers={"Content-Type": "application/json"},
            json={
                "model": "deepseek-chat",
                "messages": user_context[user_id],
                "temperature": 0.7
            },
            timeout=30
        ).json()
        
        answer = response["choices"][0]["message"]["content"]
        user_context[user_id].append({"role": "assistant", "content": answer})
        await message.answer(answer, reply_markup=get_main_kb())
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è startup-—Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ base_url)
    dp.startup.register(on_startup)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    SimpleRequestHandler(dp, bot=bot).register(app, path="/webhook")

    # –ó–∞–ø—É—Å–∫
    web.run_app(app, host="0.0.0.0", port=10000)